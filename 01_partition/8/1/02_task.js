'use strict';
// У нас есть объекты:

let head = {
  glasses: 1
};

let table = {
  pen: 3
};

let bed = {
  sheet: 1,
  pillow: 2
};

let pockets = {
  money: 2000
};
// 1. С помощью свойства __proto__ задайте прототипы так, чтобы поиск любого свойства выполнялся по следующему пути:
// pockets → bed → table → head. Например, pockets.pen должно возвращать значение 3 (найденное в table),
// а bed.glasses – значение 1 (найденное в head).
// 2. Ответьте на вопрос: как быстрее получить значение glasses – через pockets.glasses или через head.glasses?
// При необходимости составьте цепочки поиска и сравните их.

// 1. Решение

pockets.__proto__ = bed;
bed.__proto__ = table;
table.__proto__ = head;

console.log('pockets.pen', pockets.pen); // 3
console.log('bed.glasses', bed.glasses); // 1


// 2. Ответ: логически рассуждая я предположил что: значение glasses быстрее получить через head.glasses,
// т.к. это непосредственное свойство объекта head, а используя pockets.glasses необходимо будет пройти
// по цепочке прототипов до объекта head. Но в учебнике утверждают что современные движки JS на столько оптимизированы
// и запоминают где хранится данное свойство, что нет разницы как обращаться к этому свойству.